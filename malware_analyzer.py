import os
import hashlib
import requests
import subprocess
import joblib  # Use standalone joblib, not sklearn.externals
from typing import Dict, Any, List

MODEL_URL = "https://your-secure-server.com/path/to/ml_model.pkl"
MODEL_PATH = "ml_model.pkl"

def ensure_model():
    if not os.path.exists(MODEL_PATH):
        print("Random Forest model not found. Downloading...")
        response = requests.get(MODEL_URL)
        if response.status_code == 200:
            with open(MODEL_PATH, "wb") as f:
                f.write(response.content)
            print("Model downloaded and saved as ml_model.pkl")
        else:
            raise Exception("Failed to download the Random Forest model.")

# --- 1. Check against known AV signatures (ClamAV) ---
def scan_with_clamav(file_path):
    try:
        result = subprocess.run(['clamscan', file_path], capture_output=True, text=True)
        return "FOUND" in result.stdout
    except Exception as e:
        print(f"ClamAV scan failed: {e}")
        return False

# --- 2. Check against CVE database (hash-based, for example) ---
def check_cve(file_hash):
    nvd_url = f"https://services.nvd.nist.gov/rest/json/cves/1.0?keyword={file_hash}"
    try:
        response = requests.get(nvd_url)
        if response.status_code == 200:
            data = response.json()
            return data.get('result', {}).get('CVE_Items', [])
    except Exception as e:
        print(f"CVE check failed: {e}")
    return []

def calc_entropy(data):
    import math
    if not data:
        return 0
    entropy = 0
    for x in range(256):
        p_x = float(data.count(bytes([x]))) / len(data)
        if p_x > 0:
            entropy -= p_x * math.log2(p_x)
    return entropy

def entropy_score(entropy):
    # Normalize entropy (0-8) to a 1-100 scale
    return int((entropy / 8.0) * 99 + 1)

# --- 3. Feature extraction for ML ---
def extract_features(data: bytes) -> Dict[str, Any]:
    features: Dict[str, Any] = {}
    try:
        features['size'] = len(data)
        features['entropy'] = calc_entropy(data)
        features['entropy_score'] = entropy_score(features['entropy'])
        features['md5'] = hashlib.md5(data).hexdigest()
        features['improper_bitwise_ops'] = sum(
            1 for b in data if b != 0 and (b & (b - 1)) != 0
        )
        features['first_nonzero_offset'] = next(
            (i for i, b in enumerate(data) if b != 0), -1
        )
    except Exception as e:
        print(f"Feature extraction failed: {e}")
    return features

def ml_detect(features: Dict[str, Any], model_path: str = MODEL_PATH) -> int:
    try:
        ensure_model()
        model = joblib.load(model_path)
        # Ensure features are in the right order/format
        feature_vector = [
            features['size'],
            features.get('improper_bitwise_ops', 0),
            features.get('first_nonzero_offset', -1)
            # Add more features here if your model expects them
        ]
        prediction = model.predict([feature_vector])
        return prediction[0]  # 1=malicious, 0=benign
    except Exception as e:
        print(f"ML detection failed: {e}")
        return None

# --- Main analysis function ---
def analyze_file(file_path):
    print(f"Analyzing {file_path}...")
    # 1. AV scan
    av_result = scan_with_clamav(file_path)
    if av_result:
        print("Malware detected by ClamAV!")
        return "malicious"

    # 2. CVE check
    with open(file_path, 'rb') as f:
        data = f.read()
        file_hash = hashlib.sha256(data).hexdigest()

    cve_results = check_cve(file_hash)
    if cve_results:
        print("Known CVE found!")
        return "malicious"

    # 3. ML detection
    features = extract_features(data)
    print(f"File entropy: {features.get('entropy'):.3f}")
    print(f"Entropy score (1-100): {features.get('entropy_score')}")
    print(f"MD5: {features.get('md5')}")
    print(f"Improper Bitwise Ops: {features.get('improper_bitwise_ops')}")
    print(f"First Nonzero Offset: {features.get('first_nonzero_offset')}")
    ml_result = ml_detect(features)
    if ml_result == 1:
        print("Malware detected by ML model!")
        return "malicious"

    print("No malware detected.")
    return "benign"

if __name__ == "__main__":
    import sys
    try:
        if len(sys.argv) != 2:
            print("Usage: python malware_analyzer.py <file_to_analyze>")
            sys.exit(1)
        analyze_file(sys.argv[1])
    except SystemExit as e:
        # Handle SystemExit gracefully for debuggers or parent processes
        print(f"Exited with code {e.code}")